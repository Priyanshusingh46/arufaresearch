"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const repl_1 = __importDefault(require("repl"));
const vm_1 = require("vm");
const polar = __importStar(require("../index"));
const config_env_1 = require("../internal/core/config/config-env");
const repl_2 = require("../internal/util/repl");
const task_names_1 = require("./task-names");
// handles top level await by preprocessing input and awaits the output before returning
async function evaluate(code, context, filename, callback) {
    try {
        const result = await (0, vm_1.runInNewContext)((0, repl_2.preprocess)(code), context);
        callback(null, result);
    }
    catch (e) {
        if (e instanceof Error && (0, repl_2.isRecoverableError)(e)) {
            callback(new repl_1.default.Recoverable(e));
        }
        else {
            console.error(e);
            callback(null);
        }
    }
}
async function startConsole(runtimeEnv) {
    await new Promise((resolve, reject) => {
        console.log("★★★", chalk_1.default.blueBright(" Welcome to polar REPL"), "★★★");
        console.log(chalk_1.default.green('Try typing: config\n'));
        const server = repl_1.default.start({
            prompt: 'polar> ',
            eval: evaluate
        });
        // assign repl context
        server.context.polar = polar;
        server.context.config = runtimeEnv.network;
        server.context.env = runtimeEnv;
        server.on('exit', () => {
            resolve();
        });
    });
}
function default_1() {
    (0, config_env_1.task)(task_names_1.TASK_REPL, "Opens polar console")
        .setAction(async (_taskArgs, runtimeEnv) => {
        if (!runtimeEnv.config.paths) {
            return;
        }
        await startConsole(runtimeEnv);
    });
}
exports.default = default_1;
