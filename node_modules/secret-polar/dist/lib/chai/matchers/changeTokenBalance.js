"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBalanceChange = exports.supportChangeTokenBalance = void 0;
const chalk_1 = __importDefault(require("chalk"));
const context_1 = require("../../../internal/context");
const errors_1 = require("../../../internal/core/errors");
const errors_list_1 = require("../../../internal/core/errors-list");
const client_1 = require("../../client");
const changeScrtBalance_1 = require("./changeScrtBalance");
function supportChangeTokenBalance(Assertion) {
    Assertion.addMethod('changeTokenBalance', function (// eslint-disable-line  @typescript-eslint/no-explicit-any
    account, token, balanceChange, logResponse) {
        const subject = this._obj;
        if (account.account !== undefined) {
            account = account.account;
        }
        const accountAddr = account.address !== undefined
            ? account.address : account;
        const derivedPromise = Promise.all([
            getBalanceChange(subject, accountAddr, token, logResponse)
        ]).then(([actualChange]) => {
            this.assert(actualChange === balanceChange, `Expected "${accountAddr}" to change balance by ${balanceChange} ${token}, ` +
                `but it has changed by ${actualChange} ${token}`, `Expected "${accountAddr}" to not change balance by ${balanceChange} ${token},`, balanceChange, actualChange);
        });
        this.then = derivedPromise.then.bind(derivedPromise);
        this.catch = derivedPromise.catch.bind(derivedPromise);
        this.promise = derivedPromise;
        return this;
    });
}
exports.supportChangeTokenBalance = supportChangeTokenBalance;
function extractTokenBalance(balances, denom) {
    for (const coin of balances) {
        if (coin.denom === denom) {
            return Number(coin.amount);
        }
    }
    return 0;
}
async function getBalanceChange(transaction, // eslint-disable-line  @typescript-eslint/no-explicit-any
accountAddr, token, logResponse) {
    if (typeof transaction !== 'function') {
        throw new errors_1.PolarError(errors_list_1.ERRORS.GENERAL.NOT_A_FUNCTION, {
            param: transaction
        });
    }
    const client = await (0, client_1.getClient)(context_1.PolarContext.getPolarContext().getRuntimeEnv().network);
    const balanceBefore = extractTokenBalance(await (0, changeScrtBalance_1.getBalance)(client, accountAddr), token);
    const txResponse = await transaction();
    if (logResponse === true) {
        console.log(`${chalk_1.default.green("Transaction response:")} ${txResponse}`);
    }
    const balanceAfter = extractTokenBalance(await (0, changeScrtBalance_1.getBalance)(client, accountAddr), token);
    return (balanceBefore - balanceAfter);
}
exports.getBalanceChange = getBalanceChange;
